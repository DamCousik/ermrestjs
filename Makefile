# Makefile rules for ermrestjs package

# Disable built-in rules
.SUFFIXES:

# env variables needed for installation
WEB_URL_ROOT?=/
WEB_INSTALL_ROOT?=/var/www/html/
ERMRESTJS_REL_PATH?=ermrestjs/

BUILD_VERSION:=$(shell date +%Y%m%d%H%M%S)

# where chaise will be installed
ERMRESTJSDIR:=$(WEB_INSTALL_ROOT)$(ERMRESTJS_REL_PATH)

#chaise and ermrsetjs paths
ERMRESTJS_BASE_PATH:=$(WEB_URL_ROOT)$(ERMRESTJS_REL_PATH)

# Project name
PROJ=ermrest

# Node module dependencies
MODULES=node_modules

# Node bin scripts
BIN=$(MODULES)/.bin

# JavaScript source and test specs
JS=js
SETUP=js/setup
UTIL=js/utils

MAKEFILE_VAR=makefile_variables.js

# where vendor libs reside
VENDOR=vendor

# Project source files
HEADER=$(SETUP)/header.js
FOOTER=$(SETUP)/footer.js
HEADER_FOOTER= $(HEADER) \
			   $(FOOTER)

# node_build.js is generated by the `pre-generate-files-for-build` make target
SOURCE=$(UTIL)/polyfills.js \
	   $(HEADER) \
	   $(JS)/core.js \
	   $(JS)/datapath.js \
	   $(JS)/filters.js \
	   $(UTIL)/constants.js \
	   $(UTIL)/helpers.js \
	   $(UTIL)/pseudocolumn_helpers.js \
	   $(UTIL)/handlebar_helpers.js \
	   $(JS)/errors.js \
	   $(JS)/parser.js \
	   $(JS)/http.js \
	   $(JS)/reference.js \
	   $(JS)/column.js \
	   $(JS)/ag_reference.js \
	   $(FOOTER) \
	   $(JS)/export.js \
	   $(JS)/hatrac.js \
	   $(JS)/format.js \
	   $(BUILD)/$(MAKEFILE_VAR) \
	   $(SETUP)/node.js \
	   $(SETUP)/ng.js \

# Vendor libs
LIB=$(VENDOR)/lz-string.min.js \
	$(VENDOR)/spark-md5.min.js \
	$(VENDOR)/moment.min.js \
	$(VENDOR)/mustache.min.js \
	$(VENDOR)/handlebars.min.js \
	$(VENDOR)/markdown-it.min.js \
	$(VENDOR)/markdown-it-sub.min.js \
	$(VENDOR)/markdown-it-sup.min.js \
	$(VENDOR)/markdown-it-span.js \
	$(VENDOR)/markdown-it-attrs.js \
	$(VENDOR)/markdown-it-container.min.js


# Build target
BUILD=build

# Project package full/minified
PKG=$(PROJ).js
MIN=$(PROJ).min.js
VER=$(PROJ).ver.txt
MIN_LIB=$(PROJ).vendor.min.js
SRC_MAP=$(PROJ).min.js.map

# Documentation target
DOC=docs/dev-docs
API=$(DOC)/api.md

# Hidden target files (for make only)
LINT=.make-lint

# Build rule
$(BUILD): print_variables $(BUILD)/$(PKG) $(BUILD)/$(MIN_LIB) $(BUILD)/$(VER)
	@touch $(BUILD)

# Rule to build the version number file
$(BUILD)/$(VER): $(SOURCE) $(BIN)
	@mkdir -p $(BUILD)
	$(info - creating $(BUILD)/$(VER) version file)
	@git log --pretty=format:'%H' -n 1 > $(BUILD)/$(VER)

# Rule to build the package
$(BUILD)/$(PKG): $(SOURCE) $(BIN)
	@mkdir -p $(BUILD)
	@cat $(SOURCE) > $(BUILD)/$(PKG)
	$(info - creating $(BUILD)/$(MIN) file)
	@#since we're building it in build folder but when we deploy it's not build
	@#inside the build folder anymore, we have to define the base
	@$(BIN)/uglifyjs $(BUILD)/$(PKG) -o $(BUILD)/$(MIN) --compress --source-map "url='$(SRC_MAP)',base='$(BUILD)',root='$(ERMRESTJS_BASE_PATH)'"

# Rule to build the minified library file (vendor files)
$(BUILD)/$(MIN_LIB): $(LIB) $(BIN)
	@mkdir -p $(BUILD)
	$(info - creating $(BUILD)/$(MIN_LIB) minified vendor file)
	@cat $(LIB) > $(BUILD)/$(MIN_LIB)

# Rule to lint the source (terminate build on errors)
$(LINT): $(SOURCE) $(BIN)
	$(info - running linter)
	@$(BIN)/jshint $(filter $?, $(filter-out $(HEADER_FOOTER), $(SOURCE)))
	@touch $(LINT)

# Rule for making markdown docs
$(DOC): $(API)

# Rule for making API doc
$(API): $(SOURCE) $(BIN)
	@mkdir -p $(DOC)
	$(info - creating $(API) document)
	@$(BIN)/jsdoc2md $(BUILD)/$(PKG) > $(API)

# Rule to ensure Node bin scripts are present
$(BIN): $(MODULES)
	@touch $(BIN)

# Rule to install Node modules locally
$(MODULES): package.json
	npm install --production
	@touch $(MODULES)

# generate makefile_variables file
$(BUILD)/$(MAKEFILE_VAR): FORCE
	@mkdir -p $(BUILD)
	$(info - creating $(BUILD)/$(MAKEFILE_VAR) file)
	@# create the ermrestjsBuildVersion variable and use the current date + time for versioning
	@echo 'var ermrestjsBuildVersion="$(BUILD_VERSION)";' > $(BUILD)/$(MAKEFILE_VAR)
	@# add the ermrestjsBasePath that is used for fetching dependencies
	@echo 'var ermrestjsBasePath="$(ERMRESTJS_BASE_PATH)";\n' >> $(BUILD)/$(MAKEFILE_VAR)

# make sure ERMRESTJSDIR is not the root
dont_install_in_root:
	@echo "$(ERMRESTJSDIR)" | egrep -vq "^/$$|.*:/$$"

print_variables:
	$(info =================)
	$(info BUILD_VERSION=$(BUILD_VERSION))
	$(info building and deploying to: $(ERMRESTJSDIR))
	$(info ERMrestJS will be accessed using: $(ERMRESTJS_BASE_PATH))
	$(info =================)

# dummy target to always run the targets that depend on it
FORCE:

# Rule for node deps
.PHONY: deps
deps: $(BIN)

.PHONY: updeps
updeps:
	npm update

# Rule to clean project directory
.PHONY: clean
clean:
	rm -rf $(BUILD)
	rm -rf $(API)
	@rm -f .make-*

# Rule to clean the dependencies too
.PHONY: distclean
distclean: clean
	rm -rf $(MODULES)

# Rule to run the unit tests
.PHONY: test
test: ../ErmrestDataUtils
	node test/jasmine-runner.js

# Rule to run the unit tests
.PHONY: testsingle
testsingle: ../ErmrestDataUtils
	node test/single-test-runner.js

# Rule to run the linter
.PHONY: lint
lint: $(LINT)

# rule to make sure there's no error and build the package and docs
.PHONY: all
all: $(LINT) $(BUILD) $(DOC)

# Rule to install (deploy) the package
.PHONY: install dont_install_in_root
install: $(BUILD) dont_install_in_root
	$(info - deploying the package)
	@rsync -avz --exclude=$(MAKEFILE_VAR) $(BUILD)/ $(ERMRESTJSDIR)

# Rules for help/usage
.PHONY: help usage
help: usage
usage:
	@echo "Available 'make' targets:"
	@echo "    all       - build and docs"
	@echo "    install   - build andinstalls the package (ERMRESTJSDIR=$(ERMRESTJSDIR))"
	@echo "    deps      - local install of node dependencies"
	@echo "    updeps    - update local dependencies"
	@echo "    lint      - lint the source"
	@echo "    test      - run tests"
	@echo "    clean     - cleans the build environment"
	@echo "    distclean - cleans and removes dependencies"
